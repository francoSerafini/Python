# -*- coding: utf-8 -*-
"""Copia de Practica 3 - Recursividad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ilScjL6-I4LDHqLg5hdSiKkJH42p1uaU

# ![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/50px-Python-logo-notext.svg.png) **Trabajo Práctico 3: Recursividad** ![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/50px-Python-logo-notext.svg.png)

En este trabajo práctico, vamos a trabajar con el concepto de recursividad en Python. Recuerden crear una copia de este archivo en su ***Google Drive*** para tener permisos de edición.

### Martin: **martin.pustilnik@unahur.edu.ar** ###

### **Ejercicio 1**

Implementar una función que calcule el factorial de un número de forma recursiva
"""

def factorial(num):
  if (num < 0):
    raise Exception('Ingrese un numero > a 0')
  resultado = 1
  if (num > 1):
    resultado = num * factorial(num-1)
  return resultado

print(factorial(12))

"""### **Ejercicio 2**

Una canilla de una casa pierde agua de forma que todos los días pierde 2 gotas más que el día anterior. Escribir una función recursiva que calcule cuantas gotas perderá la canilla el día N. El primer día solo perdía dos gotas.
"""

# dia     cantgotas   cant acum
#  1          2           2
#  2          4           6
#  3          6           12
#  4          8           20
def gotasPerdidas(dias):
  gotas = 2
  if (dias == 1):
    return gotas
  else:
    gotas = (gotas + gotasPerdidas(dias - 1))
  return gotas

def gotasAcumuladas(acum, dias):
  if dias == 1:
    return acum + 2
  else:
    return acum + 2 + gotasAcumuladas(acum, dias - 1)

print(gotasAcumuladas(0, 4))

"""### **Ejercicio 3**

Implementar una función recursiva que calcule los números de la serie de Fibonacci. La función para generar la serie de Fibonacci es la siguiente (donde N es el índice del número en la serie):

![alt text](https://matematicasmodernas.com/wp-content/uploads/2014/03/EcuacionF.jpg)

Luego escribir un programa que pida un número N (mayor o igual a 0) al usuario e imprima por pantalla los primeros N números de la serie de Fibonacci

Sobre la sucesion de Fibonacci: https://www.vix.com/es/btg/curiosidades/4461/que-es-la-sucesion-de-fibonacci



"""

def fibonacci(n):
  if(n == 0):
    return 0
  elif(n == 1):
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(70))

"""### **Ejercicio 4**

Escribir una función recursiva que calcule el número triangular de índice N. El número triangular de índice N es la suma de todos los números desde 1 hasta N.

Algunos ejemplos:

*T(1) = 1*

*T(2) = 1 + 2*

*T(3) = 1 + 2 + 3*

*T(4) = 1 + 2 + 3 + 4*

*T(5) = 1 + 2 + 3 + 4 + 5*

...

*T(N) = 1 + 2 + 3 + 4 + ... + N*
"""

# suma todos los numeros entre 1 y n

'''
triangRecur(4) =  4 + triangRecur(3)
triangRecur(4) =  4 + 3 + triangRecur(2)
triangRecur(4) =  4 + 3 +  2 + triangRecur(1)
triangRecur(4) =  4 + 3 +  2 + 1
'''
def numeroTriangular(num):
  if(num <= 0):
    raise Exception('El numero ingresado debe ser > a 0')
  if(num == 1):
    return 1
  else:
    return num + numeroTriangular(num -1)

print(numeroTriangular(0))

"""### **Ejercicio 5**

En las redes sociales se produce una continua interacción y cada vez que un usuario realiza una acción, la comunidad se modifica. Suponiendo que un *influencer* que usa ***Instagram*** cada vez que postea algo, aumenta su cantidad de seguidores según la siguiente regla:
- Durante los primeros 20 posteos, siempre suma una cantidad fija de 1000 (mil) seguidores en cada uno.
- A partir del posteo 21, la cantidad de seguidores duplica la cantidad previa de seguidores, mas  500 seguidores extra.

Implementar una función recursiva que permita saber cuantos seguidores tendra el *Instagramer* luego de una cantidad determinada de posteos.
"""

def cantSeguidores(seguidores, posteos):
  seguidores = 1000
  if(posteos == 1):
    return seguidores
  elif(posteos <= 20):
    seguidores = cantSeguidores(seguidores, posteos - 1) + seguidores
    return seguidores
  else:
    seguidores = (cantSeguidores(seguidores, posteos - 1) * 2) + 500
    return seguidores

cantSeguidores(0, 21)

"""### **Ejercicio 6**

Un equipo de albañiles de una obra, tiene que planificar la colocación de pisos. Dicha tarea se realiza teniendo algunas consideraciones específicas, que tienen que ver con el corte de las baldosas, con el material de pegado y la cantidad de trabajadores que hay en cada momento. En el arranque, el día uno (1), los albañiles colocan siempre 100 baldosas.
Luego, la cantidad que se coloca cada día se organiza de esta manera:
- Los días pares se colocan el doble de baldosas del día anterior.
- Los días impares (salvo el primer día) se coloca una cantidad igual a la suma de las que se colocaron los 2 dias anteriores.

Implementar una función que permita saber la cantidad de baldosas que se colocan en total luego de transcurrida una determinada cantidad de días.
"""

def cantidadDEBaldosasColocadas(dias, baldosas = 100):
  if(dias == 1):
    return baldosas
  elif(dias % 2 == 0):
    baldosas = cantidadDEBaldosasColocadas((dias - 1), baldosas) * 2
    return baldosas
  else:
    baldosas = cantidadDEBaldosasColocadas((dias - 1), baldosas) + cantidadDEBaldosasColocadas((dias - 2), baldosas)
    return baldosas

cantidadDEBaldosasColocadas(4)



"""### **Ejercicio 7**

Luego de una lluvia muy grande se acumula gran cantidad de agua en un estanque, durante el primer día, el agua comienza a ponerse de color verde y un grupo de científicos decide medir cuantas algas encuentra dentro del tanque. La primer medición le da como resultado 12 algas. Luego deciden ir a realizar la medición todos los días para tratar de establecer un patrón de crecimiento y se encuentran que las algas crecen con la siguiente regla:
- Durante los siguientes 10 días (del dia 2 al 11) la cantidad de algas en el tanque es 15 más de las que había el día anterior.
- A partir del día 12, la cantidad de algas en el tanque es el triple de las que había el día previo más una cantidad fija de 100.

Escriba una función recursiva que calcule la cantidad de algas en el tanque en un día N.

Nota: Suponer que no mueren algas en el tanque.
"""

def cantidadDeAlgas(dias, algas = 12):
  if dias <= 0:
    raise Exception('La cantidad de dias debe ser mayor  o igual a uno')
  elif dias == 1:
    return algas
  elif dias <= 11:
    algas = cantidadDeAlgas(dias - 1, 15) + algas
    return algas
  else:
    algas = cantidadDeAlgas(dias - 1)
    algas = algas * 3 + 100
    return algas

cantidadDeAlgas(12)

def calcular_algas(dia):
    if dia == 1:
        return 12
    elif dia <= 11:
        return calcular_algas(dia - 1) + 15
    else:
        return 3 * calcular_algas(dia - 1) + 100

# Posibles salidas
print("Algas en el día 12:", calcular_algas(12))
print("Algas en el día 5:", calcular_algas(5))
print("Algas en el día 1:", calcular_algas(1))
print("Algas en el día 45:", calcular_algas(45))

"""### **Ejercicio 8**

Escribir una función recursiva que calcule la potencia N de un número M (M a la N), ambos números enteros positivos.   
"""

# 2 exp 0 = 1
# 2 exp 1 = 2 = 2
# 2 exp 2 = 4  = 2*2
# 2 exp 3 = 8  = 2*2*2

# n > 0
def potencia(numero, exponente):
  if exponente < 0:
    raise Exception('Ingrese un numero entero mayor que -1')
  elif exponente == 0:
    return 1
  elif exponente == 1:
    return numero
  else:
    numeroPotenciado = potencia(numero, exponente - 1) * numero
    return numeroPotenciado

potencia(2, 3)

"""### **Ejercicio 9**

Problema del trigo en el tablero de ajedrez:

![alt text](https://i0.wp.com/matematicascercanas.com/wp-content/uploads/2015/03/leyenda_ajedrez.jpg?w=600&ssl=1)

Si se colocase sobre un tablero de ajedrez, un grano de trigo en el primer casillero, dos en el segundo, cuarto en el tercero y asi sucesivamente, doblando la cantidad de granos en cada casilla ¿Cuantos granos de trigo habría en el tablero en total al final? Resolver el problema con una función recursiva.

Leyenda del Trigo y el tablero de ajedrez y mas datos: https://matematicascercanas.com/2014/03/10/la-leyenda-del-tablero-de-ajedrez-y-los-granos-de-trigo/
"""

def granos_en_casilla(n):
    """Calcula la cantidad de granos en la casilla n."""
    if n == 1:
        return 1  # El primer casillero tiene 1 grano
    else:
        return 2 * granos_en_casilla(n - 1)  # Doble la cantidad de granos de la casilla anterior

def granos_en_tablero(n):
    """Calcula la cantidad total de granos en el tablero."""
    if n == 1:
        return 1  # Solo hay un casillero
    else:
        return granos_en_casilla(n) + granos_en_tablero(n - 1)  # Suma los granos de la casilla actual y las anteriores

# Prueba la función con el tablero de ajedrez estándar de 64 casillas
total_granos = granos_en_tablero(64)
print("Total de granos en el tablero:", total_granos)



"""### **Ejercicio 10**

En un edificio alto, las cucarachas se van distribuyendo por pisos de esta forma:
- En el primer piso hay una cucaracha
- En los pisos pares el doble del número de piso (por ejemplo en el piso 8 hay 16 cucarachas)
- El resto de los pisos tienen la suma de las cucarachas de los dos pisos anteriores.

Escribir una función recursiva que calcule la cantidad de cucarachas en un edificio en función de la cantidad de pisos.
"""

def cantCucasEnElEdificio(pisos):
  if(pisos <= 1):
    return 1
  elif(pisos % 2 == 0):
    cantCucas = (pisos * 2) + cantCucasEnElEdificio(pisos - 1)
    return cantCucas
  else:
    cantCucas = cantCucasEnElEdificio(pisos - 1) + cantCucasEnElEdificio(pisos - 2)
    return cantCucas

cantCucasEnElEdificio(5)

"""### **Ejercicio 11**

Escribir la función recursiva repetirPalabra, que recibe como parámetro una palabra (cadena de caracteres) y un número N. La función debe retornar una nueva cadena que contenga la palabra repetida N veces, por ejemplo:

*repetirPalabra("hola",3) -> "holaholahola"*
"""

def repertirPalabra(palabra, cantidad):
  if type(palabra) != str:
    raise Exception('Ingrese una palabra valida')
  if cantidad == 1:
    return palabra
  else:
    palabraRepetida = repertirPalabra(palabra, cantidad-1) + palabra
    return palabraRepetida

repertirPalabra('hola', 4)

"""### **Ejercicio 12**

Escribir una función recursiva que calcule el número combinatorio, es decir, las combinaciones de N elementos tomados de a M, usando la siguiente expresión:

![numeroCombiantorio.png](https://i.ibb.co/y408VDB/numero-Combiantorio.png)
"""

# prompt: Escribir una función recursiva que calcule el número combinatorio, es decir, las combinaciones de N elementos tomados de a M, usando la siguiente expresión:

def combinatorio(n, m):
  if (n < 0 or m < 0):
    raise Exception('Ingrese numeros enteros positivos')
  if (n == m or m == 0):
    return 1
  else:
    return combinatorio(n - 1, m - 1) + combinatorio(n - 1, m)

combinatorio(5, 2)

"""### **Ejercicio 13**

Juan y María empiezan a trabajar el mismo día en dos empresas distintas. Juan arregla un sueldo inicial de \$40000 con una actualización mensual del 2% y María un sueldo inicial de \$25000 con una actualización mensual del 5%. Calcular recursivamente los sueldos de Juan y de María luego de transcurridos una cantidad determinada de meses.

Luego, escribir un programa que calcule y muestre por pantalla cuantos meses tienen que pasar para que el sueldo de María supere al de Juan (Esta parte no hace falta que sea recursiva, pero pueden intentar hacerlo).
"""

def calcularSueldos(meses, sueldoMaria = 25000, sueldoJuan = 40000):
  if(meses < 1):
    raise Exception('Los meses deben ser mayores a 0')
  elif(meses == 1):
    return sueldoMaria, sueldoJuan
  elif(meses == 2):
    sueldoMaria = sueldoMaria + (sueldoMaria * 0.02)
    sueldoJuan = sueldoJuan + (sueldoJuan * 0.05)
    return sueldoMaria, sueldoJuan
  else:
    sueldoMaria = (calcularSueldos((meses - 1), sueldoMaria, sueldoJuan))[0]
    sueldoJuan = (calcularSueldos((meses - 1), sueldoMaria, sueldoJuan))[1]
    return sueldoMaria, sueldoJuan

print(calcularSueldos(17))

"""### **Ejercicio 13**

Opcional: Hacer despues de ver arreglos la semana que viene!

Implementar la *busqueda binaria*, que recibe una lista ordenada y un numero que se desea buscar y devuelve la posicion de la lista donde se enceuntra ese numero, como se muestra en la guia de recursion




"""



#        0,1,2,3,4 ,5  6
lista = [1,2,5,7,11,50,13]
# no necesariamente tiene que estar ordenado
def buscar(lista, elem):
  indice = -1
  for i in range(len(lista)):  # de 0 hasta 6
    #print(i,lista[i])
    if lista[i] == elem:
      indice = i
  return indice

print(buscar(lista, 13))
print(buscar(lista, 61))