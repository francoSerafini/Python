{"cells":[{"cell_type":"markdown","metadata":{"id":"42630xxYD0gZ"},"source":["# ![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/50px-Python-logo-notext.svg.png) **Práctica 4: Arreglos uni y multidimensionales** ![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/50px-Python-logo-notext.svg.png)\n","\n","En este trabajo práctico, vamos a trabajar con arreglos uni y multidimensionales en Python. Recuerden crear una copia de este archivo en su ***Google Drive*** para tener permisos de edición.\n","\n","### Martin: **martin.pustilnik@unahur.edu.ar** ###"]},{"cell_type":"markdown","metadata":{"id":"xjXgmD3mskbR"},"source":["### **Ejercicio 1**\n","\n","Escribir un programa que le pida al usuario que ingrese 10 números  enteros (primero uno, luego otro, y así hasta que el usuario ingrese 10 numeros). Al final, el programa debe imprimir los números que fueron ingresados en orden inverso, la suma total de los valores y el promedio."]},{"cell_type":"code","execution_count":3,"metadata":{"id":"sJuWgqpe8Sjx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715973602498,"user_tz":180,"elapsed":9467,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"e2e5fc94-5786-4278-e076-5d6c2c99ea9c"},"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3]\n","0\n","ingrese indice 01\n","1\n","ingrese indice 12\n","2\n","ingrese indice 23\n","2.0\n"]}],"source":["import numpy as np\n","\n","a = np.zeros((3),int)\n","\n","a[0] = 1\n","a[1] = 2\n","a[2] = 3\n","\n","print(a)\n","import numpy as np\n","\n","vector = np.zeros((3),int)\n","\n","for indice in range(len(vector)):\n","  print(indice)\n","  vector[indice] = int(input(\"ingrese indice \" + str(indice)))\n","\n","# promedio\n","total = 0\n","for indice in reversed(range(len(vector))):\n","  total = total + vector[indice]\n","print(total/ len(vector))\n","\n","\n"]},{"cell_type":"code","source":["import numpy as np\n","\n","vector = np.zeros((10),int)\n","total = 0\n","\n","for i in range(0, len(vector)):\n","  vector[i] = input('Ingrese un numero entero: ')\n","  total = total + vector[i]\n","\n","for i in reversed(range(len(vector))):\n","  print(vector[i])\n","\n","print(f'La suma total es: {total}')\n","print(f'El promedio es: {total/ len(vector)}')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-OSpZmz04nUV","executionInfo":{"status":"ok","timestamp":1714748199348,"user_tz":180,"elapsed":13412,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"613dbe06-b4bc-4158-9150-f23abbab6818"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Ingrese un numero entero: 5\n","Ingrese un numero entero: 6\n","Ingrese un numero entero: 1\n","Ingrese un numero entero: 2\n","Ingrese un numero entero: 3\n","Ingrese un numero entero: 4\n","Ingrese un numero entero: 5\n","Ingrese un numero entero: 6\n","Ingrese un numero entero: 7\n","Ingrese un numero entero: 8\n","8\n","7\n","6\n","5\n","4\n","3\n","2\n","1\n","6\n","5\n","La suma total es: 47\n","El promedio es: 4.7)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","a = np.zeros((3),int)\n","\n","a[0] = 1\n","a[1] = 2\n","a[2] = False\n","\n","print(a)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QMmHhJ-LRfCn","executionInfo":{"status":"ok","timestamp":1715973891372,"user_tz":180,"elapsed":398,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"bfed2873-65fa-4bff-a062-d1732f43dabc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 0]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","arreglo = np.array([2, 4, 1, 5, 7, 9])\n","\n","print(arreglo[1:])\n","\n","print(arreglo[:-1])\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LZSLwLqzojae","executionInfo":{"status":"ok","timestamp":1714166609672,"user_tz":180,"elapsed":353,"user":{"displayName":"Martin Pustilnik","userId":"08957192645446288973"}},"outputId":"20fae586-7d09-4a3e-9e84-84e93cd567f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4 1 5 7 9]\n","[2 4 1 5 7]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","arreglo = np.array([2, 4, 1, 5, 7, 9])\n","\n","print(arreglo[1:])\n","\n","print(arreglo[:-1])\n","\n","# quitamos el primero y el ultimo\n","print(arreglo[1:-1])\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714166663829,"user_tz":180,"elapsed":20,"user":{"displayName":"Martin Pustilnik","userId":"08957192645446288973"}},"outputId":"5f3baeaa-f62f-4f0c-d1bd-e22b6002e742","id":"AUztwtK9Sy8M"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4 1 5 7 9]\n","[2 4 1 5 7]\n","[4 1 5 7]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1714166873224,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"},"user_tz":180},"id":"xDAkOjvHJtbG","outputId":"5cb5631c-545c-484e-85b9-4670224edc84"},"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","0\n","0\n"]}],"source":["import numpy as np\n","\n","vector = np.zeros((3),int)\n","\n","\n","#for i in range(len(vector)):\n","#  print(i, vector[i])\n","\n","for elem in vector:\n","  print(elem)\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xQdIQRhp-STK"},"source":["### **Ejercicio 2**\n","\n","Escribir una función que recibe un arreglo de enteros por parámetro y lo retorna con el contenido desplazado una posición hacia la derecha: el primero pasa a ser el segundo, el segundo pasa a ser el tercero y así sucesivamente. El último pasa a ser el primero.\n","\n","Luego, escribir un programa que cargue un arreglo con valores ingresados por el usuario y llame a la función con ese arreglo. Mostrar el contenido del arreglo por pantalla, antes y después de la función.\n","\n","Por ejemplo:\n","\n","Arreglo original = [2, 4, 1, 5, 7, 9]\n","\n","Arreglo desplazado = [9, 2, 4, 1, 5, 7]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1714762900942,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"},"user_tz":180},"id":"w6qrLd4-XwHB","outputId":"4af3ab7c-d37a-43aa-dcf2-32fa83a3c062"},"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 4, 1, 5, 7, 9]\n","[9, 2, 4, 1, 5, 7]\n"]}],"source":["import numpy as np\n","\n","def dezplazarArreglo(array):\n","  aux= array[len(array) - 1]\n","  for i in  reversed(range(len(array))):\n","    array[i] = array[i - 1]\n","  array[0] = aux\n","  return array\n","\n","arregloOriginal = [2, 4, 1, 5, 7, 9]\n","print(arregloOriginal)\n","print(dezplazarArreglo(arregloOriginal))\n","\n"]},{"cell_type":"markdown","metadata":{"id":"uMMYGjtoXuJD"},"source":["### **Ejercicio 3**\n","\n","Desarrollar una función que inserte un elemento en un arreglo de enteros dada la posición de inserción. Al insertar un elemento en una posición, se produce un desplazamiento a la derecha, si el arreglo estaba lleno, el último elemento se pierde.\n","\n","Por ejemplo:\n","\n","Si insertamos el elemento 5 en la posicion 3 del arreglo:\n","\n","Arreglo antes de insertar = [2, 4, 1, 7, 6, 2]\n","\n","Arreglo despues de insertar = [2, 4, 1, 5, 7, 6]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rQEF6QpbX-r0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714763456158,"user_tz":180,"elapsed":23,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"0ffc9b01-accc-4a4f-b965-294de64b750c"},"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","4\n","3\n","2\n"]},{"output_type":"execute_result","data":{"text/plain":["array([2, 4, 8, 1, 5, 7])"]},"metadata":{},"execution_count":9}],"source":["def insertarElemento(elemento, index):\n","  a = np.array([2, 4, 1, 5, 7, 9])\n","  aux = a[index]\n","  for i in reversed(range(index, len(a))):\n","    print(i)\n","    a[i] = a[i - 1]\n","  a[index] = elemento\n","  return a\n","\n","insertarElemento(8, 2)"]},{"cell_type":"markdown","source":[],"metadata":{"id":"iLDQhcoWvV3i"}},{"cell_type":"code","source":["import numpy as np\n","\n","def es_primo(numero):\n","    if numero <= 1:\n","        return 0\n","    elif numero <= 3:\n","        return 1\n","    elif numero % 2 == 0 or numero % 3 == 0:\n","        return 0\n","    else:\n","        i = 5\n","        while i * i <= numero:\n","            if numero % i == 0 or numero % (i + 2) == 0:\n","                return 0\n","            i += 6\n","        return 1\n","\n","def cantidadPrimos(arreglo):\n","  print('vector:', len(arreglo))\n","  cant = es_primo(arreglo[0])\n","  if len(arreglo) > 1:\n","    cant = cant + cantidadPrimos(arreglo[1:]) #corta el elemento 1 del arreglo\n","  return cant\n","\n","arreglo = np.array([2, 4, 1, 5, 7, 9, 11, 1, 4, 6, 8])\n","\n","cantidadPrimos(arreglo)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xOj1HoLCvS8H","executionInfo":{"status":"ok","timestamp":1715974043405,"user_tz":180,"elapsed":16,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"dd7d5e0e-89da-489a-e4c8-b0474433b039"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["vector: 11\n","vector: 10\n","vector: 9\n","vector: 8\n","vector: 7\n","vector: 6\n","vector: 5\n","vector: 4\n","vector: 3\n","vector: 2\n","vector: 1\n"]},{"output_type":"execute_result","data":{"text/plain":["4"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"FvY2_qmwX_KA"},"source":["### **Ejercicio 4**\n","\n","Escribir una función que elimine el elemento que ocupa una determinada posición de un arreglo de enteros.  Al eliminar se debe mantener la continuidad, es decir, los elementos a la derecha del eliminado, deben desplazarse a la izquierda un lugar.\n","\n","Por ejemplo:\n","\n","Si eliminamos el elemento de la posicion 2 del arreglo:\n","\n","Arreglo antes de eliminar = [4, 3, 5, 8, 6, 7]\n","\n","Arreglo despues de eliminar = [4, 3, 8, 6, 7, 0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UvYJknRvYTla","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714763601722,"user_tz":180,"elapsed":26,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"332a253e-4cde-48cf-f135-754da58dea68"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[4, 3, 5, 6, 7, 0]"]},"metadata":{},"execution_count":11}],"source":["def eliminarElemento(arreglo, index):\n","  for i in range(index, len(arreglo) - 1):\n","    arreglo[i] = arreglo[i + 1]\n","  arreglo[len(arreglo) - 1] = 0\n","  return arreglo\n","\n","a = [4, 3, 5, 8, 6, 7]\n","eliminarElemento(a, 3)\n"]},{"cell_type":"markdown","metadata":{"id":"dfuNkFxdYT--"},"source":["### **Ejercicio 5**\n","\n","Escribir una función que elimine todas las apariciones de un determinado elemento de un arreglo de enteros."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o6twFUebYsO3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714763965480,"user_tz":180,"elapsed":8,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"ae5587b9-0900-48ad-a626-bba27da79ec9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[4, 0, 5, 8, 0, 7]"]},"metadata":{},"execution_count":15}],"source":["def eliminarEsteElemento(arreglo, elemento):\n","  for i in range(len(arreglo)):\n","    if arreglo[i] == elemento:\n","      arreglo[i] = 0\n","  return arreglo\n","\n","a = [4, 3, 5, 8, 3, 7]\n","eliminarEsteElemento(a, 3)"]},{"cell_type":"markdown","metadata":{"id":"X1Vx_Ubwdj32"},"source":["### **Ejercicio 6**\n","\n","Escribir una función recursiva que reciba un arreglo de números reales como parámetro y retorne la suma de todos los elementos del arreglo."]},{"cell_type":"code","execution_count":12,"metadata":{"id":"5IO-wH84dkav","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715974522757,"user_tz":180,"elapsed":370,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"9e532366-03d0-428b-b0e1-3f4ac2aea25e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":12}],"source":["import numpy as np\n","v = np.array([-2, 10, 1, 2, 3, 4, 28, -1])\n","\n","def sumaDeArray(array, suma = 0, indice = 0):\n","  if indice == len(array):\n","    return suma\n","  else:\n","    suma += array[indice]\n","    return sumaDeArray(array, suma, indice + 1)\n","\n","sumaDeArray(v)\n"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"oul46DlZ4EYI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715974913659,"user_tz":180,"elapsed":340,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"bb30ff0e-cb0d-4e90-ab9e-1e8ce01376cc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":17}],"source":["import numpy as np\n","v = np.array([-2, 10, 1, 2, 3, 4, 28, -1])\n","\n","def sumar(array):\n","  suma = array[0]\n","  if len(array) == 1:\n","    return array[0]\n","  else:\n","    suma += sumar(array[1:])\n","  return suma\n","\n","sumar(v)\n","\n"]},{"cell_type":"code","source":["# prompt: Escribir una función recursiva que reciba un arreglo de números reales como parámetro y retorne la suma de todos los elementos del arreglo.\n","\n","def suma_recursiva(arr, i=0, suma=0):\n","  if i == len(arr):\n","    return suma\n","  else:\n","    suma += arr[i]\n","    return suma_recursiva(arr, i + 1, suma)\n","\n","\n"],"metadata":{"id":"S-b_2EAeA5P0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZJIIFv_zYsrF"},"source":["### **Ejercicio 7**\n","\n","Escribir un programa que crea y cargar dos matrices de tamaño 3x3, las suma y muestra el resultado."]},{"cell_type":"code","execution_count":19,"metadata":{"id":"JS3EgBP4ZpLs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715975084453,"user_tz":180,"elapsed":363,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"7d499c6b-dcdb-40f3-e2ef-1a01aa01b45a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["35"]},"metadata":{},"execution_count":19}],"source":["import numpy as np\n","\n","def sumarMatrices(matriz1, matriz2):\n","  suma1 = 0\n","  suma2 = 0\n","  for i in range (len(matriz1)):\n","    for j in range (len(matriz1)):\n","      suma1 += matriz1[i][j]\n","      suma2 += matriz2[i][j]\n","  return suma1 + suma2\n","\n","matriz1 = np.array([[1,2,5], [1,False,4], [1,2,3]])\n","matriz2 = np.array([[1,2,1], [1,2,3], [1,2,3]])\n","\n","sumarMatrices(matriz1, matriz2)"]},{"cell_type":"markdown","metadata":{"id":"0g6QV3ZhZp6J"},"source":["### **Ejercicio 8**\n","\n","Escribir una función que recibe una matriz y la rellena de la siguiente forma:\n","\n","En la posición M[ n , m ]\n","\n","debe contener n + m.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UW1iXcs9aULl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714771823694,"user_tz":180,"elapsed":533,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"6cd9fcd0-da1e-48c4-d28f-9160c7fa8fde"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 2]\n"," [1 2 3]\n"," [2 3 4]\n"," [3 4 5]]\n"]}],"source":["import numpy as np\n","\n","mat1 = np.array([[0,10,20],[1,1,1],[2,2,2],[2,2,2]])\n","\n","def rellenarMatiz(matriz):\n","  for i in range(len(matriz)):\n","    for j in range(len(matriz[i])):\n","      matriz[i][j] = i + j\n","  return matriz\n","\n","rellenarMatiz(mat1)\n","print(mat1)\n"]},{"cell_type":"markdown","metadata":{"id":"g96hWdmiaUmA"},"source":["### **Ejercicio 9**\n","\n","Desarrollar una función que recibe una matriz cuadrada de números reales (N x N) por parámetro y calcula la suma de los elementos que están por encima de la diagonal principal (excluyendo la diagonal).\n","\n","En el ejemplo de la imagen, la función deberia retornar: *b + c + f*\n","\n","![texto alternativo](https://economipedia.com/wp-content/uploads/Captura-de-Pantalla-2019-07-29-a-les-13.18.05-1.png)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F7UJsyFgbxkf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714773246897,"user_tz":180,"elapsed":421,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"127da02e-037b-4de8-ba4f-7acaf2180e0e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["7"]},"metadata":{},"execution_count":14}],"source":["def sumarDiagonalSuperior(matriz):\n","  suma = 0\n","  for fila in range(len(matriz)):\n","    for columna in range(fila + 1, len(matriz)):\n","      suma += matriz[fila][columna]\n","  return suma\n","\n","sumarDiagonalSuperior(np.array([[0,1,5],[1,1,1],[1,1,5]]))\n","\n"]},{"cell_type":"code","source":["# hacer una funcion recursiva que reciva una matriz y me diga\n","# verdadero si cada fila suma menos que la anterior\n","#  usar mat[1:] para acceder a la matriz sin la ultuma fila\n","\n","#\n","mat1 = np.array([[0,10,20],[10,10,20],[20,20,20]])\n","mat2 = np.array([[0,100,20],[10,10,20]])\n","mat3 = np.array([[0,00,20], [10,10,20], [0,10,20], [10,100,20], [10,1,20], [10,46,20], [10,100,20]])\n","\n","def sumarFila(matriz, fila):\n","  suma = 0\n","  for i in range(len(matriz[0])):\n","    suma += matriz[fila - 1][i]\n","  return suma\n","\n","def sumaMenos(matriz, indice):\n","  if len(matriz) == indice:\n","    print(sumarFila(matriz, indice) > sumarFila(matriz, indice - 1))\n","    return sumarFila(matriz, indice) > sumarFila(matriz, indice - 1)\n","  else:\n","    return sumaMenos(matriz, indice + 1)\n","\n","sumaMenos(mat3, 0)\n","\n"],"metadata":{"id":"WmtIakK5U5QE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714778589097,"user_tz":180,"elapsed":383,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"}},"outputId":"ddc4e793-8659-4d43-e6e3-d89b8ab43727"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"ERqaprbtbx5F"},"source":["### **Ejercicio 10**\n","\n","Escribir una función que retorna *True* si una matriz cuadrada de enteros es matriz diagonal y *False* en caso contrario.\n","\n","Una matriz diagonal es una matriz que tiene ceros en todos sus elementos, menos en la diagonal principal."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ehZJVkc_cWIg"},"outputs":[],"source":["def esMatrizDiagonal(matriz):\n","  for i in range(matriz(len)):\n","    if matriz[i][i] == 0:\n","      return False\n","  return True\n","\n","mat3 = np.array([[1,0,0], [0,10,20], [0,10,20], [10,100,20], [10,1,20], [10,46,20], [10,100,20]])\n"]},{"cell_type":"markdown","metadata":{"id":"dHytTlIXcW5P"},"source":["### **Ejercicio 11**\n","\n","Escribir una función que retorna *True* si una matriz cuadrada de enteros es simétrica y *False* en caso contrario.\n","\n","Una matriz simétrica es como la de la imagen (no importan los elementos de la diagonal principal):\n","\n","![texto alternativo](https://economipedia.com/wp-content/uploads/Captura-de-Pantalla-2019-09-23-a-les-15.58.25.png)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3SA7bN6ldIwQ"},"outputs":[],"source":["mat1 = np.array([[0,0,0],[1,1,1],[2,2,2]])\n","mat2 = np.array([['d','s','e'],['s','d','a'],['e','a','d']])\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SEbvTG6x3lqs"},"outputs":[],"source":["[]"]},{"cell_type":"markdown","metadata":{"id":"190cxAcRdJfY"},"source":["### **Ejercicio 12**\n","\n","Escribir una función recursiva, que calcule la suma de los elementos de la diagonal principal de una matriz.\n","\n","Nota: La suma de los elementos de la diagonal principal de una matriz se llama \"traza de la matriz\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jSNCfDr_eEgH"},"outputs":[],"source":["mat1 = np.array([[0,0,0],[1,1,1],[2,2,2]])\n","\n","# 0_  0  0   diagonal _\n","# 1   1_ 1\n","# 2   2  2_\n","\n","# 0_  0   diagonal _\n","# 1   1_\n","\n","# 0_\n","\n","# 0 + 1 + 2\n","mat2 = np.array([[0,0,0],[1,3,1],[2,2,2]])\n","# 0 + 3 + 2\n","\n","# notar que la diagonal es m[i,i] para todo  0 <= i < len(mat)\n","\n","\n","# caso base : cuando la matriz es de 1x1\n","# opcion a) caso recursivo, de una matrix de nxn: recursion con una matrix de n-1xn-1 y hacer algo no recursivo el la fila columna n\n","# opcion b) caso recursivo, de una matrix de nxn: recursion con una matrix de 1...n-1x1...n-1 y hacer algo no recursivo el la fila columna 0\n","\n","#\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Hiby3e3U2GaE"},"source":["### **Comentario**\n","\n","En los ejercicios que usan cadenas de caracteres, pueden usar el tipo *str*, salvo que necesiten modificar elementos de la cadena luego de crearla, en ese caso, tienen que usar arreglos de caracteres."]},{"cell_type":"markdown","metadata":{"id":"J5x_ui9jeE2c"},"source":["### **Ejercicio 13**\n","\n","Escribir 3 procedimientos que reciben una cadena de caracteres y..:\n","- Imprima los dos primeros caracteres.\n","- Imprima los tres últimos caracteres.\n","- Imprima la cadena cada dos caracteres. Por ej.: 'recta' debería imprimir 'rca'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9jAdPSY5egwF"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"tw7Pv4o_ehEv"},"source":["### **Ejercicio 14**\n","\n","Desarrollar una función recursiva que retorna *True* si una cadena de caracteres es un palíndromo y *False* en caso contrario.\n","\n","Nota: Palíndromo es la forma elegante de \"capicua\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vtXpa6hvf5gP"},"outputs":[],"source":["import numpy as np\n","pal = np.array(['n', 'e','u','q','u','e','n'])\n","noPal = np.array(['n', 'e','u','q','u','e'])\n","\n","def palindromo(palabra, index):\n","  if index == 0:\n","    return palabra[index]\n","  else:\n","    palabraInvertida[len(palabra)] = palabra[0] + palindromo(palabra[1: index], index - 1)\n","    if palabra\n","\n"]},{"cell_type":"markdown","metadata":{"id":"2iWbsrQNnofI"},"source":["### **Ejercicio 15**\n","\n","Escribir una función que recibe una cadena de caracteres y un caracter y retorna una nueva cadena que tiene el caracter entre cada letra de la cadena de entrada.\n","\n","Por ej si la cadena es: ' separar ' y el caracter es: ' x ', debería retornar ' sxexpxaxrxaxr '"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":288,"status":"ok","timestamp":1683325708222,"user":{"displayName":"Martin Pustilnik","userId":"08957192645446288973"},"user_tz":180},"id":"9aEXl8tzq1Di","outputId":"b4a636e1-f2fa-4196-b80b-9fcb9df71f54"},"outputs":[{"name":"stdout","output_type":"stream","text":["0 1\n","2 3\n","4 5\n","6 7\n","['a' 'x' 'b' 'x' 'c' 'x' 'h' 'x']\n"]}],"source":["\n","\n","arr = np.array(['a','b','c','h'])\n","#inter(arr,'x') => ['a','x','b','x','c','x']\n","\n","# asumo que arr no esta vacio\n","def inter(arr, caracter):\n","  ret= np.empty((len(arr)*2,), dtype=str)\n","\n","  for i in range(len(arr)):\n","    print(i*2, i*2 +1)\n","    ret[i*2 ] = arr[i]\n","    ret[i*2 +1] = caracter\n","\n","  return ret\n","\n","# axa\n","print(inter(arr,'x'))\n","\n"]},{"cell_type":"markdown","metadata":{"id":"vTxxGJvjx4ul"},"source":["### **Ejercicio 16**\n","\n","Escribir una función que recibe un arreglo variables de tipo \"Tiempo\" (TDA del ejercicio 4 del TP de TDA) y retorna un nuevo arreglo solo con los tiempos que son mayores a una hora (1:00:00).\n","\n","Escribir un programa para probar a la función.\n","\n","Nota: Van a tener que copiar el TDA \"Tiempo\" en el bloque de código de abajo y para que un *print* de un vector de variables de tipo \"Tiempo\" funcione, tienen que programar la operacion \"\\_\\_repr__()\" en el TDA \"Tiempo\"."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TtxqYIhRx5VY"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"tnlvo6O4q1lG"},"source":["### **Ejercicio 17**\n","\n","Una de las aplicaciones de matrices en programación es la representación y procesamiento de imágenes. Vamos a ver algunas cosas que se pueden hacer. Para esto primero tenemos que cargarnos una imagen en el colab y generar una matriz a partir de ella.\n","\n","- Descarguen el archivo \"felix.csv\" del siguiente link:\n","https://drive.google.com/file/d/1B18uu-11gnEtdlL3rTA2nolZKKWShxRY/view?usp=sharing\n","- Suban el archivo \"felix.csv\" al \"colab\" para poder cargarlo con el programa de Python de abajo (haciendo click en el icono de la carpeta ![texto alternativo](https://i.ibb.co/jzqwMsc/carpeta.png), de arriba a la izquierda y luego en \"Subir\")\n","- Completen el programa, procesando a la imagen guardada en la matriz \"felix\" para obtener las imágenes de la siguiente figura (La \"A\" es la imagen original), pueden hacer funciones que generen cada transformación en la imagen:\n","\n","![texto alternativo](https://i.ibb.co/BcW3mwF/felix-results.png)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":557},"executionInfo":{"elapsed":584,"status":"ok","timestamp":1714781719862,"user":{"displayName":"Franco Serafini","userId":"09079137664038153888"},"user_tz":180},"id":"5RXi-2ZbrXkZ","outputId":"21050a25-0ca9-4be5-abc9-f670deae765a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[[1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," ...\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]\n"," [1. 1. 1. ... 1. 1. 1.]]\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import copy as cp\n","\n","###Lectura del archivo en la matriz#####\n","felix = np.genfromtxt('felix.csv', delimiter=',')\n","########################################\n","\n","def girarImagen(imagen):\n","  return np.rot90(imagen, -4)\n","\n","######Para mostrar matriz como imagen###########\n","plt.imshow(felix)\n","imagen = girarImagen(felix)\n","plt.imshow(imagen)\n","plt.show()\n","########################################\n","\n","print(imagen)\n","\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1q-SM9errq2I6jpmyeWV8adL2JfNHM6NP","timestamp":1714166807267},{"file_id":"136tJFFQ3UP--Ut-0rzbdqu4lVr-ewcqE","timestamp":1712497510136},{"file_id":"1QqmooDWk4gCVCOLKWrqeIp4i0ORgzmb8","timestamp":1661523689825}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}